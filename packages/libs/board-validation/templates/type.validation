{% from "macros/type2Test.validation" import type2Test,anyType2Test %}

/**
 * {{document.title}} validator.
 * AUTO GENERATED! DO NOT EDIT DIRECTLY!
 */
 /** imports **/
//@ts-ignore: 6133
import {merge as _merge} from '@quenk/noni/lib/data/record';
//@ts-ignore: 6133
import {Value, Object} from '@quenk/noni/lib/data/jsonx';
//@ts-ignore: 6133
import {
Precondition,
Preconditions,
optional as _optional,
and as _and,
every as _every,
reject as _reject,
identity as _identity
} from '@quenk/preconditions';
//@ts-ignore: 6133
import { isArray as _isArray, map as _map } from '@quenk/preconditions/lib/array';
//@ts-ignore: 6133
import {
isRecord as _isRecord,
restrict as _restrict,
intersect as _intersect,
map as _recordMap
} from '@quenk/preconditions/lib/record';
//@ts-ignore: 6133
import { isBoolean as _boolean } from '@quenk/preconditions/lib/boolean';
//@ts-ignore: 6133
import { toNumber as _number } from '@quenk/preconditions/lib/number';
//@ts-ignore: 6133
import { isString as _string } from '@quenk/preconditions/lib/string';

{{ imports2TS(document.imports) }}

{% if document.additionalProperties %}

/**
 * validate a single Value against the rules for {{document.title}}.
 */
export const validate : Precondition<Value, {{document.title}}> =
_and(_isRecord, _recordMap<Value, Value, {{document.title}}>(
  {{anyType2Test(document.additionalProperties)}}
));

{% elseif document.properties %}

/**
 * validators for {{document.title}} provided as a map.
 */ 
export const validators:Preconditions<Value, Value> = {
  {% for key,value in document.properties %}
    {% if (not value.readOnly) or hasTest(value) %}
      '{{key}}' : {{type2Test(value,"_restrict")|trim}}{% if not loop.last %},{% endif %}{{"\n"}}
    {% endif %}
  {%- endfor -%}
};

/**
 * partialValidators for {{document.title}} provided as a map.
 */ 
export const partialValidators:Preconditions<Value, Value> = {
  {% for key,value in document.properties %}
    {% if (not value.readOnly) or hasTest(value) %}
      '{{key}}' : {{type2Test(value,"_intersect")|trim}}{% if not loop.last %},{% endif %}{{"\n"}}
    {% endif %}
  {%- endfor -%}
};

/**
 * validate a single Value against the rules for {{document.title}}.
 */
export const validate : Precondition<Value, {{document.title}}> =
_and(_isRecord, _restrict<Value, Value, {{document.title}}>(validators));

/**
 * validate a single Value against the rules for a partial {{document.title}}.
 */
export const validatePartial : Precondition<Value, Partial<{{document.title}}>> =
_and(_isRecord, _intersect<Value, Value, {{document.title}}>(partialValidators));

{% endif %}
