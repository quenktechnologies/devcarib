/**
 * AUTOGENERATED - DO NOT EDIT DIRECTLY!
 */
 
import { Event } from '@mia/types/lib/event';
import { validate,validatePartial } from '../validators/event';
import { parseMarkdown,inc,datetime,unique } from '@devcarib/server/lib/data/checks';
import * as _json from '@quenk/noni/lib/data/jsonx';
import * as _prec from '@quenk/preconditions/lib/async';
import * as _recordPrec from '@quenk/preconditions/lib/async/record';
import * as _arrayPrec from '@quenk/preconditions/lib/async/array';

//@ts-ignore: 6133
const title = "Event";
//@ts-ignore: 6133
const collection = "events";

//@ts-ignore: 6133
const _complete = _recordPrec.restrict;

//@ts-ignore: 6133
const _partial = _recordPrec.intersect;

/**
 * DataType checked.
 * 
 * Used by template generation.
 * @private 
 */
export type DataType = Event;

/**
 * fieldChecks for Event (AUTOGENERATED).
 */ 
export const fieldChecks: _prec.Preconditions<_json.Value, _json.Value> = {

    'id': _prec.every<_json.Value,_json.Value>(unique('events','id')),

    'title': _prec.identity,

    'startDate': _prec.identity,

    'startTime': _prec.identity,

    'startDateTime':                _prec.identity
,

    'tzOffset': _prec.identity,

    'endDate': _prec.identity,

    'endTime': _prec.identity,

    'endDateTime':                _prec.identity
,

    'url': _prec.identity,

    'location': _prec.identity,

    'host': _prec.identity,

    'description': _prec.identity,

    'description_html':                _prec.identity
,

    'created_by':                _prec.identity
,

    'created_on':                _prec.identity
,

    'last_updated_on':                _prec.identity
,

    'last_updated_by':                _prec.identity

};

/**
 * partialFieldChecks for Event (AUTOGENERATED).
 */ 
export const partialFieldChecks: _prec.Preconditions<_json.Value, _json.Value> = {

    'id':                 _prec.identity
,
    'title': _prec.identity,
    'startDate': _prec.identity,
    'startTime': _prec.identity,
    'startDateTime':                 _prec.identity
,
    'tzOffset': _prec.identity,
    'endDate': _prec.identity,
    'endTime': _prec.identity,
    'endDateTime':                 _prec.identity
,
    'url': _prec.identity,
    'location': _prec.identity,
    'host': _prec.identity,
    'description': _prec.identity,
    'description_html':                 _prec.identity
,
    'created_by':                 _prec.identity
,
    'created_on':                 _prec.identity
,
    'last_updated_on':                 _prec.identity
,
    'last_updated_by':                 _prec.identity
};

/**
 * check a value to determine if it is a correct Event
 * (AUTOGENERATED).
 */
export const check: _prec.Precondition<_json.Value, Event> = 
    _prec.and(_prec.and<_json.Value, Event,Event>(
      _prec.async(validate), _recordPrec.restrict(fieldChecks)),
      _prec.every<Event,Event>(parseMarkdown('description','description_html'),inc('events'),datetime('startDateTime','startDate','startTime','tzOffset'),datetime('endDateTime','endDate','endTime','tzOffset'))
     );

/**
 * checkPartial is like check but only checks the fields encountered.
 * (AUTOGENERATED).
 */
 export const checkPartial: _prec.Precondition<_json.Value, Partial<Event>> = 
    _prec.and(_prec.and<_json.Value, Event,Event>(
      _prec.async(validatePartial),
      _recordPrec.intersect(partialFieldChecks)),
    _prec.every(parseMarkdown('description','description_html')));
