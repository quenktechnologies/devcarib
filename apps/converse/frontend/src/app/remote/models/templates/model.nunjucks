{% from "macros.nunjucks" import params2TS %}

import * as jsonx from '@quenk/noni/lib/data/jsonx';
import * as future from '@quenk/noni/lib/control/monad/future';
import * as maybe from '@quenk/noni/lib/data/maybe';
import * as strings from '@quenk/noni/lib/data/string';

import * as request from '@quenk/jhr/lib/request';

import * as remoteModel from '@quenk/jouvert/lib/app/remote/model';
import * as models from '@quenk/jouvert/lib/app/model';

{# Remember to include document.title type in the list of imports. #}
{{imports2TS(document.imports)}}

{% set classname = document.title + "RemoteModel" %}

{% set paths = merge({search: 'invalid', get: 'invalid'}, document.paths or {}) %}

/**
 * {{classname}}
 *
 * AUTO-GENERATED, DO NOT EDIT DIRECTLY, CHANGES WILL BE LOST!
 */
 export class {{classname}} 
 extends 
   remoteModel.BaseRemoteModel<{{document.title}}> {

 create(data: {{document.title}}): future.Future<models.Id> {

        let that = this;

        return future.doFuture(function*() {

          let r = yield that.send(new request.Post('{{paths.search}}', data));

          return future.pure((<remoteModel.CreateResult>r.body).data.id);

        });

    }

    search(qry: jsonx.Object): future.Future<{{document.title}}[]> {

        let that = this;

        return future.doFuture(function*() {

          let r = yield that.send(new request.Get('{{paths.search}}', qry));

          return future.pure((r.code === 204) ?
          [] : (<remoteModel.SearchResult<{{document.title}}>>r.body).data);

        });

    }

    update(id: models.Id, changes: Partial<{{document.title}}>): future.Future<boolean> {

        let that = this;

        return future.doFuture(function*() {

        let r = yield that.send(new request.Patch(strings.interpolate('{{paths.get}}', {id}),
                changes));

          return future.pure((r.code === 200) ? true : false);

        });

    }
 
    get(id: models.Id): future.Future<maybe.Maybe<{{document.title}}>> {

        let that = this;

        return future.doFuture(function*() {

          let req = new request.Get(strings.interpolate('{{paths.get}}', {id}));

            return that
                .send(req)
                .chain(res => future.pure(maybe.fromNullable(
                (<remoteModel.GetResult<{{document.title}}>>res.body).data)))
                .catch(e => ((e.message == 'ClientError') && (e.code == 404)) ?
                    future.pure(maybe.nothing()) :
                    future.raise(e)
                );

        });

    }

    remove(id: models.Id): future.Future<boolean> {

        let that = this;

        return future.doFuture(function*() {

        let r = yield that.send(new request.Delete(strings.interpolate(
        '{{paths.get}}', { id })));

            return future.pure((r.code === 200) ? true : false);

        });

    }

    {% for method,spec in document.methods %}

    {{method}}({{params2TS(spec.parameters)}}) : {{spec.type}} {
  
      {% include spec.template %}

    }

    {% endfor -%}

}
