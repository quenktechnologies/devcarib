{

    "title": "Post",

    "type": "object",

    "collection": "posts",

    "paths": {

        "search": "/r/posts",

        "get": "/r/posts/{id}",

        "comments": "/r/posts/{id}/comments"

    },

    "imports": {

        "@converse/types/lib/post": ["Post"],

        "rmodel:@converse/types/lib/comment": ["Comment"],

        "rmodel:@quenk/jouvert/lib/app/model": ["Id"],

        "rmodel:@quenk/noni/lib/control/monad/future": ["Future", "pure", "doFuture"],

        "rmodel:@quenk/noni/lib/data/jsonx": ["Object"],

        "rmodel:@quenk/noni/lib/data/string": ["interpolate"],

        "rmodel:@quenk/jhr/lib/request": "request",

        "checks:@converse/validators/lib/post": ["validate", "validatePartial"]

    },

    "checks-complete": [

        ["@devcarib/server/lib/data/checks#inc", ["'posts'"]]

    ],

    "checks": [

        ["@devcarib/server/lib/data/checks#parseMarkdown", ["'body'", "'body_html'"]]

    ],

    "properties": {

        "id": {

            "type": "number",

            "readOnly": true,

            "checks-complete": [


                ["@devcarib/server/lib/data/checks#unique", ["'posts'", "'id'"]]

            ]

        },

        "$ref": "./common/properties.json",

        "title": {

            "type": "string",

            "filterAs": "matchci",

            "validators": [

                "@devcarib/common/lib/data/validators#textsmall",

                ["@devcarib/common/lib/data/validators#minLength", [3]],

                ["@devcarib/common/lib/data/validators#maxLength", [140]]

            ]

        },

        "body": {

            "type": "string",

            "optional": true,

            "validators": [

                "@devcarib/common/lib/data/validators#textlarge",

                ["@devcarib/common/lib/data/validators#minLength", [3]],

                ["@devcarib/common/lib/data/validators#maxLength", [10000]]

            ]

        },

        "body_html": {

            "type": "string",

            "readOnly": true

        },

        "web-views": {

            "type": "number",

            "readOnly": true

        }

    },

    "rmodel:methods": {

        "createComment": {

            "type": "Future<Id>",

            "parameters": ["id: Id", "data: Comment"]

        },

        "getComments": {

            "type": "Future<Comment[]>",

            "parameters": ["id: Id", "qry: Object={}"]

        }


    }

}
